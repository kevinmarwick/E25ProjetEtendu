@model E25ProjetEtendu.ViewModels.DeliveryVM

@{
    ViewData["Title"] = "Tableau de livraison";

    var pendingHeaderClass = Model.PendingOrders.Any() ? "bg-warning bg-opacity-25" : "bg-success bg-opacity-25";
    var inProgressHeaderClass = Model.InProgressOrders.Any() ? "bg-primary bg-opacity-25" : "bg-success bg-opacity-25";
    var pendingBadgeClass = Model.PendingOrders.Any() ? "bg-warning text-dark" : "bg-success text-white";
    var inProgressBadgeClass = Model.InProgressOrders.Any() ? "bg-primary text-dark" : "bg-success text-white";
    var pendingEmptyClass = Model.PendingOrders.Any() ? "alert alert-info" : "p-3 rounded";
    var inProgressEmptyClass = Model.InProgressOrders.Any() ? "alert alert-warning" : "p-3 rounded";
    var pendingEmptyBg = Model.PendingOrders.Any() ? "" : "style='background-color: rgba(25,135,84,0.15)'";
    var inProgressEmptyBg = Model.InProgressOrders.Any() ? "" : "style='background-color: rgba(25,135,84,0.15)'";
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Erreur :</strong> @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>
    </div>
}
else if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <strong>Succès :</strong> @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>
    </div>
}



<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>

<a class="btn btn-outline-dark mb-3" data-bs-toggle="modal" data-bs-target="#historiqueModal">
    <i class="bi bi-clock-history me-1"></i> Historique des commandes
</a>

<div class="container">
    <div class="row g-4">
        <!-- Commandes en attente -->
        <div class="col-lg-6">
            <div class="card shadow-sm border-0">
                <div class="card-header @pendingHeaderClass">
                    <h5 class="mb-0">📦 Commandes en attente <span class="badge @pendingBadgeClass">@Model.TotalPending</span></h5>
                </div>
                <div class="card-body p-3">
                    @if (!Model.PendingOrders.Any())
                    {
                        <div class="@pendingEmptyClass" @Html.Raw(pendingEmptyBg)>Aucune commande en attente.</div>
                    }
                    else
                    {
                        var expandedOrderId = Model.PendingOrders.First().OrderId;
                        foreach (var order in Model.PendingOrders)
                        {
                            var isExpanded = order.OrderId == expandedOrderId;
                            <div class="p-3 mb-3 rounded shadow-sm border bg-light-subtle">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div><strong>#@order.OrderId</strong> - @order.Buyer.FirstName</div>
                                    <div class="d-flex align-items-center gap-2">
                                        <small class="text-muted">@order.OrderDate.ToString("g")</small>
                                        <button class="btn btn-sm btn-outline-secondary toggle-details @(isExpanded ? "d-none" : "")" type="button" data-target="details-@order.OrderId">Détails</button>
                                    </div>
                                </div>
                                <div class="small">Lieu : @order.Location</div>

                                <div class="order-details mt-2 @(isExpanded ? "d-block" : "d-none")" id="details-@order.OrderId">
                                    <div class="d-flex flex-column gap-1 ps-1">
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <div class="d-flex justify-content-between align-items-center small px-1">
                                                <span>@item.Product.Nom <span class="text-muted">×@item.Quantity</span></span>
                                            </div>
                                        }
                                    </div>
                                    <div class="mt-2 text-end d-flex justify-content-end gap-2">
                                        <button class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#refuseModal-@order.OrderId">Refuser</button>
                                        <button class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#acceptModal-@order.OrderId">Accepter</button>
                                    </div>
                                </div>
                            </div>

                            <div class="modal fade" id="refuseModal-@order.OrderId" tabindex="-1">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <form method="post" asp-controller="Order" asp-action="CancelAsStation">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="orderId" value="@order.OrderId" />
                                            <div class="modal-header">
                                                <h5 class="modal-title">Confirmer le refus</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                            </div>
                                            <div class="modal-body">
                                                Êtes-vous sûr de vouloir refuser la commande <strong>#@order.OrderId</strong> ?
                                            </div>
                                            <div class="modal-footer">
                                                <button type="submit" class="btn btn-outline-danger btn-sm">Oui, refuser</button>
                                                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Annuler</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>

                            <div class="modal fade" id="acceptModal-@order.OrderId" tabindex="-1">
                                <div class="modal-dialog">
                                    <div class="modal-content shadow">
                                        <form method="post" asp-controller="Delivery" asp-action="ConfirmDelivery">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="orderId" value="@order.OrderId" />
                                            <div class="modal-header">
                                                <h5 class="modal-title">Confirmer</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                            </div>
                                            <div class="modal-body">
                                                <p>Commande <strong>#@order.OrderId</strong></p>
                                                <div class="mb-2">
                                                    <label class="form-label">Courriel</label>
                                                    <input type="email" name="email" class="form-control form-control-sm" required />
                                                </div>
                                                <div class="mb-2">
                                                    <label class="form-label">Mot de passe</label>
                                                    <input type="password" name="password" class="form-control form-control-sm" required />
                                                </div>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="submit" class="btn btn-sm btn-success">Confirmer</button>
                                                <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Annuler</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Collapsible commandes en cours -->
        <div class="col-lg-6">
            <div class="card shadow-sm border-0">
                <div class="card-header @inProgressHeaderClass">
                    <h5 class="mb-0">🚚 Commandes en cours <span class="badge @inProgressBadgeClass">@Model.InProgressOrders.Count()</span></h5>
                </div>
                <div class="card-body p-3">
                    @if (!Model.InProgressOrders.Any())
                    {
                        <div class="@inProgressEmptyClass" @Html.Raw(inProgressEmptyBg)>Aucune commande en cours.</div>
                    }
                    else
                    {
                        @foreach (var order in Model.InProgressOrders)
                        {
                            <div class="p-3 mb-3 rounded shadow-sm border bg-light-subtle">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div><strong>#@order.OrderId</strong> - @order.Buyer.FirstName</div>
                                    <div class="d-flex align-items-center gap-2">
                                        <small class="text-muted">@order.OrderDate.ToString("g")</small>
                                        <button class="btn btn-sm btn-outline-secondary toggle-inprogress" type="button" data-target="progress-@order.OrderId">Détails</button>
                                    </div>
                                </div>
                                <div class="small">Lieu : @order.Location</div>
                                <div class="small">Livreur : @order.Deliverer?.FullName</div>
                                <div class="inprogress-details d-none mt-2" id="progress-@order.OrderId">
                                    <div class="d-flex flex-column gap-1 ps-1">
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <div class="d-flex justify-content-between align-items-center small px-1">
                                                <span>@item.Product.Nom <span class="text-muted">×@item.Quantity</span></span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Historique des commandes Modal -->
<div class="modal fade" id="historiqueModal" tabindex="-1" aria-labelledby="historiqueModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content shadow">
            <div class="modal-header">
                <h5 class="modal-title" id="historiqueModalLabel">Historique des commandes</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
            </div>
            <div class="modal-body">
                @if (Model.OrderHistory.Any())
                {
                    <table id="orderHistoryTable" class="table table-striped">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Date</th>
                                <th>Client</th>
                                <th>Statut</th>
                                <th>Total</th>
                                <th>Lieu</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in Model.OrderHistory)
                            {
                                <tr>
                                    <td>@order.OrderId</td>
                                    <td>@order.OrderDate.ToString("dd MMMM yyyy HH'h' mm", System.Globalization.CultureInfo.GetCultureInfo("fr-CA"))</td>
                                    <td>@order.Buyer?.UserName</td>
                                    <td>@order.Status.GetDisplayName()</td>
                                    <td>@order.TotalPrice.ToString("C")</td>
                                    <td>@order.Location</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="alert alert-info">Aucune commande terminée ou annulée.</div>
                }
            </div>
            <div class="modal-footer d-flex justify-content-between">
                <a asp-action="OrdersHistory" asp-controller="Delivery" class="btn btn-secondary">
                    Voir tout l'historique
                </a>
                <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">Fermer</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll('.toggle-details').forEach(btn => {
                btn.addEventListener('click', function () {
                    const targetId = this.getAttribute('data-target');

                    document.querySelectorAll('.order-details').forEach(el => {
                        if (el.id === targetId) {
                            el.classList.remove('d-none');
                            el.classList.add('d-block');
                        } else {
                            el.classList.add('d-none');
                            el.classList.remove('d-block');
                        }
                    });

                    document.querySelectorAll('.toggle-details').forEach(b => b.classList.remove('d-none'));
                    this.classList.add('d-none');
                });
            });

            document.querySelectorAll('.toggle-inprogress').forEach(btn => {
                btn.addEventListener('click', function () {
                    const targetId = this.getAttribute('data-target');
                    const target = document.getElementById(targetId);

                    if (target.classList.contains('d-none')) {
                        target.classList.remove('d-none');
                        target.classList.add('d-block');
                    } else {
                        target.classList.add('d-none');
                        target.classList.remove('d-block');
                    }
                });
            });

            $('#orderHistoryTable').DataTable({
                paging: true,
                searching: true,
                ordering: true,
                info: true,
                responsive: true,
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/fr-FR.json'
                }
            });

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/orderStatusHub")
                .build();

            function reload(reason) {
                console.log(`🔄 Mise à jour requise : ${reason}`);
                location.reload();
            }

            connection.on("NouvelleCommandeDisponible", () => reload("Nouvelle commande"));
            connection.on("CommandeAnnuleeParClient", () => reload("Commande annulée par le client"));
            connection.on("CommandeAnnuleeParLivreur", () => reload("Commande annulée par le livreur"));
            connection.on("CommandeTermineeParLivreur", () => reload("Commande livrée"));

            connection.start()
                .then(() => {
                    connection.invoke("JoinDeliveryStation");
                })
                .catch(err => console.error("Erreur SignalR :", err));
        });
    </script>
  
}


