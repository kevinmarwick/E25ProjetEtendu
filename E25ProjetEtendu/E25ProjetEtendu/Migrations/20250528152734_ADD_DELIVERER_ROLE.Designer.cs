// <auto-generated />
using System;
using E25ProjetEtendu.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E25ProjetEtendu.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250528152734_ADD_DELIVERER_ROLE")]
    partial class ADD_DELIVERER_ROLE
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E25ProjetEtendu.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "21111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "f963d70d-2ecf-4b8d-a55a-ec73aed0a9a4",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHV77xWQPCWFdAaO1RhKTez6tIdt/fvXDYczJ9cgnsN+FVfYUyb9ZnU/MlKPeaWBAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5c60c23-2b4b-4c6f-bae7-024c63141b0b",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "42222222-2222-2222-2222-222222222222",
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "a385f094-84f5-496b-94c4-4ec3a4dd80ba",
                            Email = "livreur@example.com",
                            EmailConfirmed = true,
                            FirstName = "Livreur",
                            LastName = "Livreur",
                            LockoutEnabled = false,
                            NormalizedEmail = "LIVREUR@EXAMPLE.COM",
                            NormalizedUserName = "LIVREUR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDHG8fGZ9yZCD+SdSEm+ZHKHEjmybeQhv+pPFgVQ0120eOMGGUmmVsM2m7sYRrZAww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2243f90c-e95a-4a7a-a777-fb9e7fb6614a",
                            TwoFactorEnabled = false,
                            UserName = "livreur@example.com"
                        },
                        new
                        {
                            Id = "32222222-2222-2222-2222-222222222222",
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "5a4901e3-f455-4449-8c09-cc5485664898",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jean",
                            LastName = "Utilisateur",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGo2JhZB0Zy4zZbJ/0wWjLAOUM1YjTCaHlt1hQBL0vFc9sCKLgJ9yOe1JH9CgInJpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b6926fa-5710-47f3-bf2e-1beeffbb1485",
                            TwoFactorEnabled = false,
                            UserName = "jean@example.com"
                        },
                        new
                        {
                            Id = "54444444-4444-4444-4444-444444444444",
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "19015501-0a26-4cbd-83e9-8fc0fc248e09",
                            Email = "maxime@example.com",
                            EmailConfirmed = true,
                            FirstName = "Maxime",
                            LastName = "Utilisateur",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAXIME@EXAMPLE.COM",
                            NormalizedUserName = "MAXIME@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGo2JhZB0Zy4zZbJ/0wWjLAOUM1YjTCaHlt1hQBL0vFc9sCKLgJ9yOe1JH9CgInJpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fcd2813c-d0ff-4841-9609-c5e481327714",
                            TwoFactorEnabled = false,
                            UserName = "maxime@example.com"
                        },
                        new
                        {
                            Id = "65555555-5555-5555-5555-555555555555",
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "941dd778-4dcb-48fb-9a77-9020d1765c45",
                            Email = "nicolas@example.com",
                            EmailConfirmed = true,
                            FirstName = "Nicolas",
                            LastName = "Utilisateur",
                            LockoutEnabled = false,
                            NormalizedEmail = "NICOLAS@EXAMPLE.COM",
                            NormalizedUserName = "NICOLAS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGo2JhZB0Zy4zZbJ/0wWjLAOUM1YjTCaHlt1hQBL0vFc9sCKLgJ9yOe1JH9CgInJpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "913113e6-a628-43db-9b37-a8e3a190bc67",
                            TwoFactorEnabled = false,
                            UserName = "nicolas@example.com"
                        },
                        new
                        {
                            Id = "43333333-3333-3333-3333-333333333333",
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "4443ad95-c7e4-4be5-8729-c2611afd3b6e",
                            Email = "jacob@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jacob",
                            LastName = "Utilisateur",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACOB@EXAMPLE.COM",
                            NormalizedUserName = "JACOB@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGo2JhZB0Zy4zZbJ/0wWjLAOUM1YjTCaHlt1hQBL0vFc9sCKLgJ9yOe1JH9CgInJpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c481aab-fc32-4c88-85a6-1882d0c83f8b",
                            TwoFactorEnabled = false,
                            UserName = "jacob@example.com"
                        });
                });

            modelBuilder.Entity("E25ProjetEtendu.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DelivererId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("DelivererId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 2001,
                            BuyerId = "32222222-2222-2222-2222-222222222222",
                            DelivererId = "43333333-3333-3333-3333-333333333333",
                            Location = "D-0001",
                            OrderDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalPrice = 6.00m
                        },
                        new
                        {
                            OrderId = 2002,
                            BuyerId = "32222222-2222-2222-2222-222222222222",
                            DelivererId = "43333333-3333-3333-3333-333333333333",
                            Location = "D-0002",
                            OrderDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalPrice = 4.00m
                        },
                        new
                        {
                            OrderId = 2003,
                            BuyerId = "54444444-4444-4444-4444-444444444444",
                            DelivererId = "43333333-3333-3333-3333-333333333333",
                            Location = "D-0003",
                            OrderDate = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalPrice = 5.00m
                        },
                        new
                        {
                            OrderId = 2004,
                            BuyerId = "54444444-4444-4444-4444-444444444444",
                            DelivererId = "43333333-3333-3333-3333-333333333333",
                            Location = "D-0004",
                            OrderDate = new DateTime(2024, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalPrice = 2.00m
                        },
                        new
                        {
                            OrderId = 2005,
                            BuyerId = "65555555-5555-5555-5555-555555555555",
                            DelivererId = "43333333-3333-3333-3333-333333333333",
                            Location = "D-0005",
                            OrderDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalPrice = 2.00m
                        },
                        new
                        {
                            OrderId = 2006,
                            BuyerId = "65555555-5555-5555-5555-555555555555",
                            DelivererId = "43333333-3333-3333-3333-333333333333",
                            Location = "D-0006",
                            OrderDate = new DateTime(2024, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalPrice = 3.00m
                        },
                        new
                        {
                            OrderId = 2007,
                            BuyerId = "32222222-2222-2222-2222-222222222222",
                            Location = "D-0007",
                            OrderDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TotalPrice = 3.00m
                        },
                        new
                        {
                            OrderId = 2008,
                            BuyerId = "54444444-4444-4444-4444-444444444444",
                            Location = "D-0008",
                            OrderDate = new DateTime(2024, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TotalPrice = 4.00m
                        },
                        new
                        {
                            OrderId = 2009,
                            BuyerId = "65555555-5555-5555-5555-555555555555",
                            Location = "D-0009",
                            OrderDate = new DateTime(2024, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TotalPrice = 2.00m
                        });
                });

            modelBuilder.Entity("E25ProjetEtendu.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemId = 1,
                            OrderId = 2001,
                            ProductId = 1,
                            Quantity = 2,
                            UnitPrice = 3.00m
                        },
                        new
                        {
                            OrderItemId = 2,
                            OrderId = 2002,
                            ProductId = 2,
                            Quantity = 2,
                            UnitPrice = 2.00m
                        },
                        new
                        {
                            OrderItemId = 3,
                            OrderId = 2003,
                            ProductId = 5,
                            Quantity = 1,
                            UnitPrice = 5.00m
                        },
                        new
                        {
                            OrderItemId = 4,
                            OrderId = 2004,
                            ProductId = 8,
                            Quantity = 1,
                            UnitPrice = 2.00m
                        },
                        new
                        {
                            OrderItemId = 5,
                            OrderId = 2005,
                            ProductId = 9,
                            Quantity = 1,
                            UnitPrice = 2.00m
                        },
                        new
                        {
                            OrderItemId = 6,
                            OrderId = 2006,
                            ProductId = 6,
                            Quantity = 1,
                            UnitPrice = 3.00m
                        },
                        new
                        {
                            OrderItemId = 7,
                            OrderId = 2007,
                            ProductId = 9,
                            Quantity = 1,
                            UnitPrice = 3.00m
                        },
                        new
                        {
                            OrderItemId = 8,
                            OrderId = 2008,
                            ProductId = 5,
                            Quantity = 1,
                            UnitPrice = 4.00m
                        },
                        new
                        {
                            OrderItemId = 9,
                            OrderId = 2009,
                            ProductId = 2,
                            Quantity = 1,
                            UnitPrice = 2.00m
                        });
                });

            modelBuilder.Entity("E25ProjetEtendu.Models.Produit", b =>
                {
                    b.Property<int>("ProduitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduitId"));

                    b.Property<bool>("EstActif")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Note")
                        .HasColumnType("int");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ValeurNutritive")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ProduitId");

                    b.ToTable("produits");

                    b.HasData(
                        new
                        {
                            ProduitId = 1,
                            EstActif = true,
                            Image = "redbull.png",
                            InventoryQuantity = 120,
                            Nom = "Red Bull",
                            Note = 4,
                            Prix = 3m,
                            ValeurNutritive = "Calories: 110, Sucres: 27g, Caféine: 80mg, Glucides: 28g, Protéines: 1g"
                        },
                        new
                        {
                            ProduitId = 2,
                            EstActif = true,
                            Image = "pogo.jpg",
                            InventoryQuantity = 200,
                            Nom = "Pogo",
                            Note = 3,
                            Prix = 2m,
                            ValeurNutritive = "Calories: 190, Lipides: 9g, Glucides: 20g, Protéines: 6g, Sodium: 500mg"
                        },
                        new
                        {
                            ProduitId = 3,
                            EstActif = true,
                            Image = "eau.jpg",
                            InventoryQuantity = 300,
                            Nom = "Bouteille d'eau",
                            Note = 5,
                            Prix = 1m,
                            ValeurNutritive = "Calories: 0, Lipides: 0g, Sucres: 0g, Sodium: 0mg"
                        },
                        new
                        {
                            ProduitId = 4,
                            EstActif = true,
                            Image = "chips.jpg",
                            InventoryQuantity = 100,
                            Nom = "Chips Lay’s",
                            Note = 4,
                            Prix = 2m,
                            ValeurNutritive = "Calories: 160, Lipides: 10g, Glucides: 15g, Sucres: 1g, Sodium: 170mg"
                        },
                        new
                        {
                            ProduitId = 5,
                            EstActif = true,
                            Image = "nutella.jpg",
                            InventoryQuantity = 80,
                            Nom = "Nutella",
                            Note = 5,
                            Prix = 5m,
                            ValeurNutritive = "Calories: 200, Lipides: 11g, Glucides: 22g, Sucres: 21g, Protéines: 2g"
                        },
                        new
                        {
                            ProduitId = 6,
                            EstActif = true,
                            Image = "activia.jpg",
                            InventoryQuantity = 150,
                            Nom = "Yogourt Activia",
                            Note = 4,
                            Prix = 3m,
                            ValeurNutritive = "Calories: 100, Lipides: 2g, Glucides: 15g, Sucres: 12g, Protéines: 5g"
                        },
                        new
                        {
                            ProduitId = 7,
                            EstActif = true,
                            Image = "pizza.jpg",
                            InventoryQuantity = 60,
                            Nom = "Pizza congelée",
                            Note = 4,
                            Prix = 6m,
                            ValeurNutritive = "Calories: 350, Lipides: 15g, Glucides: 40g, Sucres: 5g, Protéines: 12g"
                        },
                        new
                        {
                            ProduitId = 8,
                            EstActif = true,
                            Image = "granola.jpg",
                            InventoryQuantity = 180,
                            Nom = "Barre de granola",
                            Note = 4,
                            Prix = 2m,
                            ValeurNutritive = "Calories: 190, Lipides: 7g, Glucides: 29g, Sucres: 11g, Protéines: 4g"
                        },
                        new
                        {
                            ProduitId = 9,
                            EstActif = true,
                            Image = "coca.jpg",
                            InventoryQuantity = 220,
                            Nom = "Coca-Cola",
                            Note = 3,
                            Prix = 2m,
                            ValeurNutritive = "Calories: 140, Sucres: 39g, Glucides: 39g, Sodium: 45mg"
                        },
                        new
                        {
                            ProduitId = 10,
                            EstActif = true,
                            Image = "sandwich.jpg",
                            InventoryQuantity = 75,
                            Nom = "Sandwich jambon-fromage",
                            Note = 4,
                            Prix = 4m,
                            ValeurNutritive = "Calories: 320, Lipides: 12g, Glucides: 30g, Protéines: 18g, Sodium: 780mg"
                        },
                        new
                        {
                            ProduitId = 11,
                            EstActif = true,
                            Image = "starbucks.jpg",
                            InventoryQuantity = 90,
                            Nom = "Café Starbucks",
                            Note = 4,
                            Prix = 4m,
                            ValeurNutritive = "Calories: 150, Sucres: 20g, Caféine: 95mg"
                        },
                        new
                        {
                            ProduitId = 12,
                            EstActif = true,
                            Image = "axe.jpg",
                            InventoryQuantity = 50,
                            Nom = "Déodorant Axe",
                            Note = 5,
                            Prix = 6m,
                            ValeurNutritive = "Sans calories"
                        },
                        new
                        {
                            ProduitId = 13,
                            EstActif = true,
                            Image = "headshoulders.jpg",
                            InventoryQuantity = 60,
                            Nom = "Shampooing Head & Shoulders",
                            Note = 4,
                            Prix = 7m,
                            ValeurNutritive = "Sans calories"
                        },
                        new
                        {
                            ProduitId = 14,
                            EstActif = true,
                            Image = "benjerry.jpg",
                            InventoryQuantity = 40,
                            Nom = "Crème glacée Ben & Jerry's",
                            Note = 5,
                            Prix = 8m,
                            ValeurNutritive = "Calories: 270, Lipides: 14g, Sucres: 26g"
                        },
                        new
                        {
                            ProduitId = 15,
                            EstActif = true,
                            Image = "pain.jpg",
                            InventoryQuantity = 120,
                            Nom = "Pain tranché",
                            Note = 3,
                            Prix = 3m,
                            ValeurNutritive = "Calories: 80, Glucides: 15g, Protéines: 3g"
                        },
                        new
                        {
                            ProduitId = 16,
                            EstActif = true,
                            Image = "cheddar.jpg",
                            InventoryQuantity = 100,
                            Nom = "Fromage cheddar",
                            Note = 4,
                            Prix = 5m,
                            ValeurNutritive = "Calories: 110, Lipides: 9g, Protéines: 7g"
                        },
                        new
                        {
                            ProduitId = 17,
                            EstActif = true,
                            Image = "yaourt.jpg",
                            InventoryQuantity = 130,
                            Nom = "Yaourt grec",
                            Note = 4,
                            Prix = 4m,
                            ValeurNutritive = "Calories: 120, Protéines: 10g, Sucres: 8g"
                        },
                        new
                        {
                            ProduitId = 18,
                            EstActif = true,
                            Image = "ritz.jpg",
                            InventoryQuantity = 80,
                            Nom = "Crackers Ritz",
                            Note = 3,
                            Prix = 3m,
                            ValeurNutritive = "Calories: 160, Lipides: 8g, Glucides: 20g"
                        },
                        new
                        {
                            ProduitId = 19,
                            EstActif = true,
                            Image = "soupe.jpg",
                            InventoryQuantity = 70,
                            Nom = "Soupe Campbell",
                            Note = 4,
                            Prix = 2m,
                            ValeurNutritive = "Calories: 90, Sodium: 480mg"
                        },
                        new
                        {
                            ProduitId = 20,
                            EstActif = true,
                            Image = "tropicana.jpg",
                            InventoryQuantity = 150,
                            Nom = "Jus d'orange Tropicana",
                            Note = 4,
                            Prix = 3m,
                            ValeurNutritive = "Calories: 110, Sucres: 23g"
                        },
                        new
                        {
                            ProduitId = 21,
                            EstActif = true,
                            Image = "colgate.jpg",
                            InventoryQuantity = 200,
                            Nom = "Brosse à dents Colgate",
                            Note = 4,
                            Prix = 2m,
                            ValeurNutritive = "Sans calories"
                        },
                        new
                        {
                            ProduitId = 22,
                            EstActif = true,
                            Image = "sensodyne.jpg",
                            InventoryQuantity = 150,
                            Nom = "Dentifrice Sensodyne",
                            Note = 5,
                            Prix = 5m,
                            ValeurNutritive = "Sans calories"
                        },
                        new
                        {
                            ProduitId = 23,
                            EstActif = true,
                            Image = "dove.jpg",
                            InventoryQuantity = 180,
                            Nom = "Savon Dove",
                            Note = 4,
                            Prix = 2m,
                            ValeurNutritive = "Sans calories"
                        },
                        new
                        {
                            ProduitId = 24,
                            EstActif = true,
                            Image = "gatorade.jpg",
                            InventoryQuantity = 110,
                            Nom = "Boisson Gatorade",
                            Note = 4,
                            Prix = 3m,
                            ValeurNutritive = "Calories: 80, Sucres: 21g"
                        },
                        new
                        {
                            ProduitId = 25,
                            EstActif = true,
                            Image = "kinder.jpg",
                            InventoryQuantity = 100,
                            Nom = "Chocolat Kinder",
                            Note = 5,
                            Prix = 2m,
                            ValeurNutritive = "Calories: 120, Sucres: 12g"
                        },
                        new
                        {
                            ProduitId = 26,
                            EstActif = true,
                            Image = "cheerios.jpg",
                            InventoryQuantity = 90,
                            Nom = "Céréales Cheerios",
                            Note = 4,
                            Prix = 4m,
                            ValeurNutritive = "Calories: 110, Glucides: 20g, Protéines: 3g"
                        },
                        new
                        {
                            ProduitId = 27,
                            EstActif = true,
                            Image = "oreo.jpg",
                            InventoryQuantity = 130,
                            Nom = "Biscuit Oreo",
                            Note = 4,
                            Prix = 3m,
                            ValeurNutritive = "Calories: 160, Sucres: 14g"
                        },
                        new
                        {
                            ProduitId = 28,
                            EstActif = true,
                            Image = "beurre.jpg",
                            InventoryQuantity = 70,
                            Nom = "Beurre d'arachide",
                            Note = 4,
                            Prix = 5m,
                            ValeurNutritive = "Calories: 190, Lipides: 16g, Protéines: 7g"
                        },
                        new
                        {
                            ProduitId = 29,
                            EstActif = true,
                            Image = "perrier.jpg",
                            InventoryQuantity = 200,
                            Nom = "Eau gazeuse Perrier",
                            Note = 4,
                            Prix = 2m,
                            ValeurNutritive = "Calories: 0"
                        },
                        new
                        {
                            ProduitId = 30,
                            EstActif = true,
                            Image = "muffin.jpg",
                            InventoryQuantity = 60,
                            Nom = "Muffin aux bleuets",
                            Note = 5,
                            Prix = 3m,
                            ValeurNutritive = "Calories: 380, Lipides: 16g, Sucres: 28g"
                        },
                        new
                        {
                            ProduitId = 31,
                            EstActif = true,
                            Image = "Aid.jpg",
                            InventoryQuantity = 0,
                            Nom = "BandAid",
                            Note = 5,
                            Prix = 3m,
                            ValeurNutritive = "Calories: 0"
                        });
                });

            modelBuilder.Entity("E25ProjetEtendu.Models.StockReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReservedAt");

                    b.ToTable("StockReservations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-role-id",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "deliverystation-role-id",
                            Name = "DeliveryStation",
                            NormalizedName = "DELIVERYSTATION"
                        },
                        new
                        {
                            Id = "user-role-id",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "deliverer-role-id",
                            Name = "Deliverer",
                            NormalizedName = "DELIVERER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "21111111-1111-1111-1111-111111111111",
                            RoleId = "admin-role-id"
                        },
                        new
                        {
                            UserId = "42222222-2222-2222-2222-222222222222",
                            RoleId = "deliverystation-role-id"
                        },
                        new
                        {
                            UserId = "32222222-2222-2222-2222-222222222222",
                            RoleId = "user-role-id"
                        },
                        new
                        {
                            UserId = "43333333-3333-3333-3333-333333333333",
                            RoleId = "user-role-id"
                        },
                        new
                        {
                            UserId = "54444444-4444-4444-4444-444444444444",
                            RoleId = "user-role-id"
                        },
                        new
                        {
                            UserId = "65555555-5555-5555-5555-555555555555",
                            RoleId = "user-role-id"
                        },
                        new
                        {
                            UserId = "43333333-3333-3333-3333-333333333333",
                            RoleId = "deliverer-role-id"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E25ProjetEtendu.Models.Order", b =>
                {
                    b.HasOne("E25ProjetEtendu.Models.ApplicationUser", "Buyer")
                        .WithMany("BoughtOrders")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E25ProjetEtendu.Models.ApplicationUser", "Deliverer")
                        .WithMany("DeliveredOrders")
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Buyer");

                    b.Navigation("Deliverer");
                });

            modelBuilder.Entity("E25ProjetEtendu.Models.OrderItem", b =>
                {
                    b.HasOne("E25ProjetEtendu.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E25ProjetEtendu.Models.Produit", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E25ProjetEtendu.Models.StockReservation", b =>
                {
                    b.HasOne("E25ProjetEtendu.Models.Produit", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E25ProjetEtendu.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E25ProjetEtendu.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E25ProjetEtendu.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E25ProjetEtendu.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E25ProjetEtendu.Models.ApplicationUser", b =>
                {
                    b.Navigation("BoughtOrders");

                    b.Navigation("DeliveredOrders");
                });

            modelBuilder.Entity("E25ProjetEtendu.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("E25ProjetEtendu.Models.Produit", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
